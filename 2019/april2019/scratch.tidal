hush

setcps 1.1

slowrun n = fmap toInteger (slow n $ run n)

d1
-- $ whenmod 7 5 (rev.striate "1 <3 8> . 8 12 3 2")
$ juxBy 0 (iter 16 . (# speed 2 ))
$ splice 32 ((run 16 +(slow (run 8) (run 8)) + (16*(run "4 5 1"))))
$ s "md-break:3" # unit "c" #cut 1 #gain 1.2

d2
$ (|* speed "-1")
$ striate "3 1 8 12"
$ foldmod [1,2,3] 6 4 (rot 1)
$ chop 3
$ slice 4 "<[0 1] 2 <3 4>>"
$ s "mono-loop:2(3,5)"
# legato 1
# octave "[4,6]"

d2
$ (|* speed "-1")
$ striate "3 1 8 12"
$ whenmodr [1,2,3] [6,5] [4,3] (rot 1)
$ chop 3
$ slice 4 "<[0 1] 2 <3 4>>"
$ s "mono-loop:2(3,5)"
# legato 1
# octave "[4,6]"

d1
-- $ whenmod 7 5 (rev.striate "1 <3 8> . 8 12 3 2")
$ splice
64 ("[4@2 3 2 1 0] 1 [2] [4 6] 2 [19 2 3] 1 2*3" + (16*(run "4 5 1")))
$ s "md-break" # unit "c" #cut 1 #gain 1.2

d2 $ slow 2 $ iter 4 $ slice 16 (run 8) $ s "glass-box" #cut 2 # delay 1 #orbit 1

d2
$ note (scale "melodicMinor" $ inside 2 (whenmod 5 4 (stutWith 3 0.125 (|- 3))) $ foldmod [2,3] 5 2 (|+ "-2") $ cat ["0@3 -2","~ 1", "2"])
# s "chBand01"
#legato 2
# octave 4
#pF "feedback" (trigger 1 $ range 30 1 $ envL)
#pF "resonance" (trigger 1 $ range 1000 20 $ envL)
#pan rand

d1
$ splice 64 ("[4@2 3 2 1 0] 1 [2] [4 6] 2 [19 2 3] 1 2*3" + (16*(run "4 5 1")))
$ s "md-break" # unit "c" #cut 1

d1 $ ghost $ s "{bd(<2 3 5>,<8>,<0 2 0 1>) ~, sd(<1 1 1 <2 3>>,8,5)}%2"

d1 $ note (scale "minor" $ slowrun "4 3 5") # s "pizz"

d1
$ every 4 (rev.striate " 1 2 [5 8] [12 16]")
$ foldmod [1,3] 5 4 (inside 2 (rev).iter 4)
$ stutWith 3 (3/4) (|+ n (irand 4)) $ "2(<2 3>,8)" #s "808" # hpf 200 #speed 1.5


clutchIn 1 8 $ s "bd sd(<2 3 5>,8)"

clutchIn 1 8 $ stack [
s "subs:4"
,
s "bd(<1 2>,8,<0 1 2>) sd(<2 3 5>,8 ,<0 1>)"]

d1
$ slow 2
$ whenmodr [1,2,3] [6,5] [4,3] (rot 2)
$ foldwhen [5,3,9] [4,2] ((fast 3).(|+ n 1)) $ s "808"



d2 $ note (scale "phrygian" $ (whenmodr [1,3,2] [3,5] [2,1] (condFx "1(5,8)" ( (+ "~ <2 3>")))) $ "0(<3 4 7 5>,12,<0 1 2 4>)") #s "chBand01"

-- let foldmod =
d1 $ stack [
   foldmod [1,3,2] 3 2 (condFx "1(5,8)" ( stutWith 3 (4/12) ((|+ n 1).(# gain "0.85 0.66 1 0.75")) )) $ s "pss(<3 4 7 5>,12,<0 1 2 4>)"
  ]

d2 $ stack [
  mono $ note (scale "phrygian" $ (snowball 4 (+) ((mod 7).(0.5 ~>).slow 2) ) $ foldmod [1,3,2] 3 2 (condFx "1(5,8)" ( stutWith 3 (4/12) ((|+ 1)))) $ slow 2 $ "0(<3 4 7 5>,12,<0 1 2 4>)") #s "chBand01"
  ]





d1
$ every 4 (rev.striate "3 1 8 2")
$ foldmod [1,0.5] 6 4 (rot "2")
$ stack
[
  every 2 (stutWith 3 (3/4) (|* gain 0.75))
  $ foldmod [1,2,3] 5 3 (stutWith 3 0.125 ((|+ n 1).(|* gain 0.88).(|+ speed rand)))
  $ s "minipops(<2 3>,8)"
  # gain 1.2
  ,
  every 2 ghost $ s "~ sd"
  ,
  s "~ subCym01*<1 1 2 1> ~ ~"
]




d1
$ stack
[
  s "conet:4*16"
  #begin (range 0.111 0.1 $ rand)
  #end (0.2)
  #rel 0.1
  #gain 1
  #speed 1.5
  #cut 1
  ,
  -- stutWith 2 (1/4) (degrade .(|* gain 0.9).stutWith 3 (choose [(1/6),(3/8),(1/12)]) (|* lpf 0.8))
  s "~ [brute-sn:6,sd]"
  # lpf 10000
  ,
  fix (stutWith 3 0.125 (|* gain 0.5)) (n "7")
  $ sometimes (stutWith "<2 3>" ( choose [0.125,0.25,0.125*3]) (|+ n "1 2"))
  $ s "brute-bd:5(<3 2 1>,8,<0 1 0 2>) ~"
]

hush

d1 $ slice 64 (((run 16)*(irand 4)`mod`16)+ 16*"<0 1 2 3>") $ loopAt 4 $ s "md-break:9" #unit "c"

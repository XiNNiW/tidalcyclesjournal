import qualified Sound.Tidal.Scales as Scales

import qualified Sound.Tidal.Chords as Chords

let coda timesToRepeat pattern = cat $ take timesToRepeat (repeat pattern)

print coda 4 "{{ [ bd bd ]/3 , [ . hh]} [sn sn:2] [hh bd:2] hh:9}%4"

d1 $ sound "[bd hh] [sn sn:2] [hh bd:2] hh:9"

d1 $ foldEvery [4,6] (slow "[3 2 1]" . rev) $ sound "[bd hh] [sn sn:2] [hh bd:2] hh:9"

d2
  $ every 8 (const $ up (toScale Scales.hexDorian $ "4 3 2 1") # s "gtr:1" # gain 0.7)
  $ foldEvery [4,6] (hurry "[1 2 1 1]/2" . rev . slow "[3 2 1]")
  $ up (toScale Scales.hexDorian $ "0 ~ [ [ 7 9 ] 2 1 5]/2 " + "[0 7 [3 2]5]/4") # s "gtr:1" # gain 0.7

hush

d1 $ slow 4 $ sound "{[bd[bd bd[bd[bd[bd bd]]]]], [. sn]*2}%3"

-- d1
--   $ foldEvery [12, 13, 8] (every 8 (const $ sound "[[[rm*2] . .] hh:2 sn]") . spin "[[3 6 9]*12]/2" . slow "[3 4 3 2]/3" . every 2 (rev))
--   $ sound
--   $ foldEvery [4, 6] (
--     const $ cat [
--       "{[bd hh] [sn sn:2], [hh bd:2] hh:9}%4",
--       "bd hh [sn ~]*6"
--     ]
--   )
--   $ coda 4 "{{ [ bd bd ]/3 , [ . hh]} [sn sn:2] [hh bd:2] hh:9}%4"

d1
  $ foldEvery [12, 13, 8] ( chop "1 1 2 3" . slow "3 1" . every 2 (rev))
  $ sound
  $ foldEvery [4, 6] (
    const $ cat [
      "{[bd hh] [sn sn:2], [hh bd:2] hh:9}%4",
      "bd hh [sn ~]*6"
    ]
  )
  $ coda 4 "{{ [ bd bd ]/3 , [ . hh]} [sn sn:2] [hh bd:2] hh:9}%4"

d1
  -- $ foldEvery [2, 5] (brak)
  $ foldEvery [12, 13, 8] ( chop "1 8 2 3" . slow "3 1" . every 2 (rev))
  -- $ striate (slow 8 $ "[1 1 1 1 1 1 3 4]")
  $ every 2 ((slow 8 $ "[0 [0 0 .75] 0 [0.25 0 -0.25]]/2") ~>)
  $ sound
  $ every 16 (const " [[hh*2] drum:2 ] hh hh hh")
  $ foldEvery [8,12] (
    const $ randcat [
      "{[bd hh] [sn sn:2], [hh bd:2] hh:9}%4",
      "bd hh [sn ~]*6"
    ]
  )
  $ every 4 (slow "[3 2 1]" . rev)
  $ every 2 (const $ randcat ["bd bd bd","rd . sn:2", "[ hh hh hh ] . bd sn:2" , "hh:9 hh hh:9 hh" , "[sn:2 sn sn] cp ~ bd"])
  $ groove


  let groove = "[bd hh] [sn sn:2] [hh bd:2] hh:9"

  let melody = "[[0 12] . . [3 5] . .] [ . [7 8 6]/3] . . . [[ . . . 9]/4] . [[ . . 0 5]/4]"

  let chordRoots = "[0 2 3 4 5 6 7 8]/4"

  d1
    -- $ every 32 (spread ($) [fast 2, rev, slow 2, striate 3, (# speed "0.8")])
    $ every 16 ( smash 2 [4,3,2] . degrade )
    $ foldEvery [4,6] (slow "[3 2 1]" . rev)
    $ sound
    $ foldEvery [7,8] (const
      $ randcat[
        "{bd bd bd}%8",
        "[sn:3 bd:2] ~ hh [hh*4]"
      ]
    )
    $ every 2 (shuffle 8)
    $ cat [
      "[bd hh] [sn sn:2] [hh bd:2] hh:9",
      "[bd hh] [sn sn:2] [hh bd:2] [hh:8 hh:9]",
      "<{bd bd bd}%1, . hh> [sn .] [hh [bd:2 bd:2]] hh:9",
      "[bd sn:6 ] [ sn sn:2] [hh bd:2] hh:9"
    ]

  d2
    $ ( "0 oct0.25" ~>)
    $ every 4 (striate "4 1 2 3" )
    $ up
    ( toScale Scales.hexDorian
      $ slow 4 $ melody + chordRoots + 12
    ) # s "c64-broken:3" # gain 0.9
        -- ) # s "tx81z-2x-bass" # gain 0.5

  d3
    $ n
    ( toScale Scales.hexDorian
      $ slow 4 $ melody + chordRoots-- - 12
    ) # s "superpiano" # gain 0.9 # sustain 8

  d4
    $ foldEvery [7, 6] (palindrome)
    $ every 2 (slow "[[2 6 2 3]]*32")
    $ every 4 (const $ up "0")
    $ up
    ( toScale Scales.hexDorian
      $ slow 4 $ ("[0 0.125 0 0.0125]*32" ~>) $ "[ . 3 . . 0 [[3 4 5 6]/4] 2 1]*8" +  melody + chordRoots
    ) # s "tx81z-tine" # gain 0.5

  d5
    $ up
    ( toScale Scales.hexDorian
      $ slow 4 $ "[0]*8" +  melody + chordRoots
    ) # s "ATC-1" # gain 1 # vowel "i"

  d1 $ s "[bd sn]*8" # speed "1.2*4" /// [speed "1 2 3 4", crush "4 3 2 1"]


hush

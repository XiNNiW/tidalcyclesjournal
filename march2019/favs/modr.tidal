hush

whenmodr speeds numerators denominators modifier pattern
  | done = modifiedpattern
  | otherwise =  whenmodr rests restn restd modifier modifiedpattern
  where modifiedpattern = outside speed (whenmod numerator denominator (modifier)) $ pattern
        numerator = (head numerators)
        denominator = (head denominators)
        speed = (head speeds)
        done = (null $ tail speeds) && (null $ tail numerators) && (null $ tail denominators)
        restn = if null (tail numerators) then [numerator] else (tail numerators)
        restd = if null (tail denominators) then [denominator] else (tail denominators)
        rests = if null (tail speeds) then [speed] else (tail speeds)

whenmods' speeds numerators denominators modifier pattern
    | done = modifiedpattern
    | otherwise =  whenmods' rests restn restd modifier modifiedpattern
  where modifiedpattern = outside speed (whenmod numerator denominator ((fast speed).(modifier))) $ pattern
        numerator = (head numerators)
        denominator = (head denominators)
        speed = (head speeds)
        done = (null $ tail speeds) && (null $ tail numerators) && (null $ tail denominators)
        restn = if null (tail numerators) then [numerator] else (tail numerators)
        restd = if null (tail denominators) then [denominator] else (tail denominators)
        rests = if null (tail speeds) then [speed] else (tail speeds)

whenmods speeds numerators denominators newpattern pattern = whenmods' speeds numerators denominators (const newpattern) pattern

hush

--
-- let whenmods spd d n f p = inside spd (whenmod d n f) p
-- in
d1 $ mono $ (note $ scale "spanish" $ whenmodr [0.25,8,3,2,6] [7,6,8] [3,5] (+ "<2 3 . 1 . -1 . [-3 2 . 1]>") $ "0 <1 -3> . -1 . 4 ") #s "pm03" #legato 1.5

d1 (note $ scale "spanish" $ whenmodr [4,1,3] [6,7] [4,3,2] (iter 4.(+ "-1")) $ run 14) #s "pm03"

d1
$ ghost
$ whenmods ["1 2",0.25,0.75] [5,7] [6] (s "[909*4] . virus-sd [subCym01*<3 2 1>] . subCym01  . <[subCym01 cp] [EFM:5]>")
$ whenmodr [4,1,"3"] [6,7] [4,3,2] (whenmod 4 3 (rev) . rot 1 . iter 8 . foldEvery [3,4] (0.75 ~>))
$ foldEvery [3,4] (0.25 ~>)
$ foldEvery [6,8] (brak)
$ s "[909*2 virus-sd,subCym01]"
# delay 0.5 #delaytime (5/3)


let bassline = (|+ "<0@4 2@2 3@3 4>")
            $ whenmodr [4,1,"3"] [6,7] [4,3,2] (whenmod 4 3 (rev) . rot 2 . iter 8 . foldEvery [3,4] (0.75 ~>).(+ "0(5,8,<0 1 0 3>)/4 . 2 3 . 5 . -1"))
            $ "<0@4 0@4 1@4 2@4>" + "0 3 . <[-3 -9] [4 5]>"
in
d2
$ stack [
  (note
    $ scale "spanish"
    $ bassline
    )
  # s "fm02" #pF "harmonic" "2" #pF "brightness" (range 0.125 1.5 $ iter 4 $ segment 8 $ fast 3 $ saw)
  # octave 3
  # delayfeedback 0.333
  ,
  (note
    $ scale "spanish"
    $ ("<0.5 0>" ~>)
    $ (slow "4" $ "<[0,3,7] [0,2,-2]>") |+ bassline
    )
  # s "pm04" # orbit 3 # gain 0.466
  # octave 5
  -- # pF "feedback" 10.7
  # legato 2
  # delay 0.5 #delaytime (7/6) # delayfeedback 0.333
  # room 0.7 # size 0.75
]

hush



d1 $ whenmodr [(1/3),4,1] [7,6] [4,3] (inside 2 (iter 8)) $ s "bd sd"


whenmodri speeds numerators denominators modifier pattern
    | done = modifiedpattern
    | otherwise =  whenmodr rests restn restd modifier modifiedpattern
    where modifiedpattern = inside speed (whenmod numerator denominator (modifier)) $ pattern
          numerator = (head numerators)
          denominator = (head denominators)
          speed = (head speeds)
          done = (null $ tail speeds) && (null $ tail numerators) && (null $ tail denominators)
          restn = if null (tail numerators) then [numerator] else (tail numerators)
          restd = if null (tail denominators) then [denominator] else (tail denominators)
          rests = if null (tail speeds) then [speed] else (tail speeds)


whenmodr' speeds numerators denominators modifier basemod pattern
    | done = whenmod basemod modifiedpattern
    | otherwise =  whenmodr rests restn restd modifier modifiedpattern
    where modifiedpattern = inside speed (whenmod numerator denominator (modifier)) $ pattern
          numerator = (head numerators)
          denominator = (head denominators)
          speed = (head speeds)
          done = (null $ tail speeds) && (null $ tail numerators) && (null $ tail denominators)
          restn = if null (tail numerators) then [numerator] else (tail numerators)
          restd = if null (tail denominators) then [denominator] else (tail denominators)
          rests = if null (tail speeds) then [speed] else (tail speeds)


d1
$ stack [
  whenmod 4 3 (fast 4)
  $ sound "odx*2", sound "arpy*4"
  # resonance 0.2 # cutoff (range 200 2000 rand)
  |*| up "<[3@2 5] [-2@3 0] 0 0>", up ("[-6 6*2]*2" + "<<3 5> -2 0 0>")
  # sound "jvbass" # gain 1.25
  ,
  loopAt 4 $ sound "blue:1" # shape 0.8
]

hush

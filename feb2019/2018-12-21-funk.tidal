setcps (98/60/2)

hush

do {
  hush;
  once $ midicmd "stop" #s "midi";
}

resetCycles

let chordProg = note ((scale "minor" "[0,2,3,5]") + "[12,12,12,0]"+"<<0 [[2 0] ~]> [0 [0 1]] [3 2] [5 <2 [7 9]>]>")
in
do {
    p "clock" $ midicmd "midiClock*48" #s "midi";
    once $ midicmd "start" #s "midi";
    d1 $ every 4 (iter 4) $ stack [
      n ("<[0*2] [0 ~ ~ 0] > <~ [~ [~ 12] ~ 0] [~ 0]>" + "[~ 2][~ 4]" )# s "[c09dr,midi]" # unit "c" # speed 3 # gain 1.1 #orbit 0 #midichan 0
      ,
      sound "[~ TRX:6?] <TRX:2 TRX:2 TRX:2 [TRX:2 TRX:6 ~ TRX:2 ]>" #orbit 0
      ,
      sound "[EFM:2,midi]*4" # gain (range 0.5 1 ((sine)+ "<0.7 0.6>")) # nudge 0.004 #orbit 1 #midichan 1
    ]
    ;
    d2 $ sound "~ [TRX:4,midi]" # unit "c" |*| speed 2 #orbit 1 #midichan 2
    ;
    d3
    $ slow 4
    $ every 4 (within (0.5, 1 )( chunk 6 $ const $ slow 3 $ arpg $ chordProg # s "[pizz,midi]"))
    $ foldEvery [3,4] (rev .stut 2 0.26 0.8)
    $ note ((scale "minor"  ((run 8) + "0 [~ [1(3,8)]]") ) - 0) #s "[pizz:0,midi]" # gain 1 # nudge "0.004 0.01" # orbit 2 #midichan 3
    ;
    d4 $ slow 4 $ chordProg # sound "[rhodes,midi]" # speed 2 #orbit 3 #midichan 4;
    d5 $ slow 4 $ note ((scale "<pelog>" $ "<~ ~ ~ 1> 0(<5 3 3 3>,8)" + "~ <[0 1 4][0 1 2][[5 2] 3 4][3 2 [6 [~ [11,5,14]]]]>")+12) #s "[pe-gtr:9,midi]" #orbit 4  # gain 1.2
    -- d5 $ slow 4 $ every 2 (const silence) $ arpeggiate  $ (chordProg) # sound "[pe-gtr:9,midi]" # speed 2 #orbit 4 #midichan 5
    ;
}

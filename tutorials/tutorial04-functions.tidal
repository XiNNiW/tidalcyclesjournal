-- we've covered some basic rhythms and melodies
-- but that isn't all tidal has to offer
-- there are a whole suite of functions that you can use to manipulate your patterns
-- some of them are documented here∷ https://tidalcycles.org/index.php/Category:Functions

-- lets focus on a few of these to see how we might make music with them

-- the 'rev' function reverses a pattern

-- forwards
d1 $ stack [
  sound "[bd ~ bd] [[sd bd] ~]",
  note (scale "hexPhrygian" "~ 0 . 4 5 . 6") #s "gtr"
]

-- backwards
d1 $ rev $ stack [
  sound "[bd ~ bd] [[sd bd] ~]",
  note (scale "hexPhrygian" "~ 0 . 4 5 . 6") #s "gtr"
]

hush

--the 'slow' function slows the pattern by n
-- 2x slower
d1 $ slow 2 $ stack [
  sound "[bd ~ bd] [[sd bd] ~]",
  note (scale "hexPhrygian" "~ 0 . 4 5 . 6") #s "gtr"
]

-- 3x slower
d1 $ slow 3 $ stack [
  sound "[bd ~ bd] [[sd bd] ~]",
  note (scale "hexPhrygian" "~ 0 . 4 5 . 6") #s "gtr"
]

hush

-- the fast function speeds up patterns
-- 2x faster
d1 $ fast 2 $ stack [
  sound "[bd ~ bd] [[sd bd] ~]",
  note (scale "hexPhrygian" "~ 0 . 4 5 . 6") #s "gtr"
]

-- 3x faster
d1 $ fast 3 $ stack [
  sound "[bd ~ bd] [[sd bd] ~]",
  note (scale "hexPhrygian" "~ 0 . 4 5 . 6") #s "gtr"
]

hush

-- many of these functions can be fed patterns instead of single numbers
-- each cycle this gets slower... and slllooowweerr
d1 $ slow "<1 2 3 4>" $ stack [
  sound "[bd ~ bd] [[sd bd] ~]",
  note (scale "hexPhrygian" "~ 0 . 4 5 . 6") #s "gtr"
]

-- the 'every' function, applies an effect every n cycles
-- to reverse the pattern every 4th cycle:
d1 $ every 4 (rev) $ stack [
  sound "[bd ~ bd] [[sd bd] ~]",
  note (scale "hexPhrygian" "~ 0 . 4 5 . 6") #s "gtr"
]

hush

-- the '~>' function shifts events forward in time
-- the following shifts the pattern forward by 1/2 of a cycle every 4 cycles
d1 $ every 4 (0.5 ~>) $ stack [
  sound "[bd ~ bd] [[sd bd] ~]",
  note (scale "hexPhrygian" "~ 0 . 4 5 . 6") #s "gtr"
]

hush

-- functions can be composed together using the '.' operator
-- the following first, slows, then reverses, then shifts the pattern every 4 cycles
d1 $ every 4 (("0.5 <0.25 0.75>" ~>).rev.slow "2") $ stack [
  sound "[bd ~ bd] [[sd bd] ~]",
  note (scale "hexPhrygian" "~ 0 . 4 5 . 6") #s "gtr"
]

hush

-- there are tons and tons of functions to play with and things can get crazy fast
-- my best advice is to dive in and try stuff out
-- here are the docs∷ https://tidalcycles.org/index.php/Category:Functions


d1
$ every 8 (sometimes (*| speed "-1"))
$ stack [
  -- juxBy 0.5 (ghost) $ (# speed "-1") $ note (scale "minPent" $ slow 4 $ "[0,4,6]" + slow 2 "0 9 4[3 5]") # sound "gtr:4" #gain 0.5 #lpf (slow 16 $4000*saw),
  stack [
    mono $ note ((scale "minPent" $ "<0(<3 1 5 2>,8) [~ -2]>" + "<[[0*2] 2] [3 3 [5 6 7 8]] [-2 0] [[0*2] 2]>")-3) # s "jvbass" #gain 1.5
  ],
  outside 3 (every 15 (stut "0 1 3" 0.5 0.33 . (# speed (saw))))
  $ every 16 (striate "[2 4] [8 12 18]")
  $ every 8 (within (0.75, 1) ((# speed "[-1 1]*8").ghost.slow "1 2 3"))
  $ foldEvery [3,5] (within (0.25, 0.75) (("0.25 [0.75 1] 0.25"*(irand 5)) <~))
  $ outside 6 (iter "4 3 [12 6 8]")
  $ stack [
    outside 16 (every 7 $ const $ silence) $ stut "[3 1]0 0 0" 0.25 0.9 $ n "[0 [~ 0]] [[~ 0] [~ 0]] [[~ 0] <0*2 0>] 1" #s "bd" #gain 1 #lpf 10000,
    (# speed 2) $ outside 8 (every 11 $ const $ silence) $ ghost $ n "[[~ ~ ~ 3] [~ ~]] [2 ~ ~ ~]" #s "cp",
    outside 8 (every 3 $ const $ silence) $ n "[[~ 5 ~ ~] [~ [5*2]]] [~ 5 ~ 5]" #s "drum" # gain "[[0.88..1][0.9..1]] [0.9..1] [0.88..1]",
    outside 4 (every 6 $ const $ silence) $ s "[~] [808:6 ~]" # gain 0.88 # delaytime "0.33 [0.66 0.2 [0.1 0.01]] "# delayfeedback 0.5 # delay (slow 8 $ saw) #room "0.1 [0.25(3,8) 0.1]"
  ]
]

hush

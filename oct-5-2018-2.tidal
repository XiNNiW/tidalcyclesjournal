cps (163/60/4)

hush

d1
  $ slow 3
  $ stack [
    sound "{<<{c64bd}%3 c64bd [c64bd [. . c64bd*2]]>, [ . c64hh]> [c64sn [c64hh c64cp*3]]}%3",
     (0.125 ~>) $  sound "{[c64hh:4*2]*[[3 4] [2 1]]}%3" |+| n ( scale 1 0 $ irand 6) # gain 0.6
  ]

t1 anticipate
  -- $ sometimes (foldEvery [2,4] (degrade))
  -- $ sometimes (foldEvery [9,10,11]  (const $ (0.25 ~>) $ sound "c64hh:4*2" # gain (scalex 0.5 1 $ (run 16)/16)))
  -- $ foldEvery [3,5] (every 4 ( ("[0.125 0.25 0.5]/2" ~>) . often (stut 3 0.88 6 .slow 4.palindrome.(|*|speed 0.5))))
  $ rarely (every 4 (const $ sound "sn:2*4" # gain "[0.25 0.6  0.5 1]"))
  $ sometimes (foldEvery [3, 4] ( ("0.125 0 0.25 0.125" <~)))
  $ stack [
    juxBy 0.5 ((|+| up (rand)).chop 4) $ sound ". drum:1",
    -- ,sometimes (#n (run 8))
    -- sometimesBy 0.5 ( foldEvery [3,7,8] ((rarely ( palindrome.  stut 3 0.5 16) ) . (slow $ slow 4 "2 [3 2]")))
      rarely (every 4 (striate 4))
      $ sometimes (every 4 (const
        $ randcat [
          sound "[c64sn:3 sn:2] [ . c64hh*3] c64bd:7 c64cp",
          sound "c64sn*6" # gain ((run 8 )/17 + 0.6),
          sound "[[. c64hh] c64bd:7 [c64bd[c64bd[c64bd]]]] {{[c64cb*3]/2}%2,[. . . c64hh:0*4]} ",
          sound "[[. c64hh] c64bd:7 [c64bd[c64bd[c64bd]]]] [. c64sn],[. . . c64hh:0*4]} "
        ]))
    $ slow 3
    $ stack [
      sound "{<<{c64bd}%3 c64bd [c64bd [. . c64bd*2]]>, [ . c64hh]> [c64sn [c64hh c64cp*3]]}%3",
       (0.125 ~>) $  sound "{[c64hh:4*2]*[[3 4] [2 1]]}%3" |+| n ( scale 1 0 $ irand 6) # gain 0.7
    ]
  ]


t1 anticipate
  $ sometimes (foldEvery [2,4] (degrade))
  $ sometimes (foldEvery [9,10,11]  (const $ (0.25 ~>) $ sound "c64hh*2" # gain (scalex 0.5 1 $ (run 16)/16)))
  $ foldEvery [3,5] (every 4 ( ("[0.125 0.25 0.5]/2" ~>) . often (stut 3 0.88 6 .slow 4.palindrome.(|*|speed 0.5))))
  $ rarely (every 4 (const $ sound "sn:2*4" # gain "[0.25 0.6  0.5 1]"))
  $ sometimes (foldEvery [3, 4] ( ("0.125 0 0.125" <~)))
  $ stack [
    juxBy 0.5 ((|+| up (rand)).chop 4) $ sound ". drum:1",
    -- ,sometimes (#n (run 8))
    sometimesBy 0.5 ( foldEvery [3,7,8] ((rarely ( palindrome.  stut 3 0.5 16) ) . (slow $ slow 4 "2 [3 2]")))
      $ rarely (every 4 (striate 4))
      $ sometimes (every 4 (const
        $ randcat [
          sound "[c64sn:3 sn:2] [ . c64hh*3] c64bd:7 c64cp",
          sound "c64sn*6" # gain ((run 8 )/17 + 0.6),
          sound "[[. c64hh] c64bd:7 [c64bd[c64bd[c64bd]]]] {{[c64cb*3]/2}%2,[. . . c64hh:0*4]} ",
          sound "[[. c64hh] c64bd:7 [c64bd[c64bd[c64bd]]]] [. c64sn],[. . . c64hh:0*4]} "
        ]))
    $ slow 3
    $ stack [
      sound "{<<{c64bd}%3 c64bd [c64bd [. . c64bd*2]]>, [ . c64hh]> [c64sn [c64hh c64cp*3]]}%3",
      stut 2 0.5 3 $ (0.125 ~>) $  sound "{[c64hh:4*2]*[[3 4] [2 1]]}%3" |+| n ( scale 1 0 $ irand 6) # gain 0.9
    ]
  ]

hush

t1 anticipate
  $ every 8 (slow 2 . smash 4 [1 , 3, 1,  4]. chop "<0 2 3 8>". (|+| lpf (scalex 6000 700 $ run (irand 4000))))
  -- $ chop "<1 2 3 4 5 8>"
  -- $ sometimes (foldEvery [2,4] (degrade))
  $ sometimes (foldEvery [9,10,11]  (const $ (0.25 ~>) $ sound "c64hh*2" # gain (scalex 0.5 1 $ (run 16)/16)))
  $ foldEvery [3,5] (every 4 ( ("[0.125 0.25 0.5]/2" ~>) . often (stut 3 0.88 6 .slow 4.palindrome.(|*|speed 0.5))))
  $ rarely (every 4 (const $ sound "sn:2*4" # gain "[0.25 0.6  0.5 1]"))
  $ sometimes (foldEvery [3, 4] ( ("0.125 0 0.125" <~)))
  $ stack [
    juxBy 0.5 ((|+| up (rand)).chop 4) $ sound ". drum:1",
    -- ,sometimes (#n (run 8))
    sometimesBy 0.5 ( foldEvery [3,7,8] ((rarely ( palindrome.  stut 3 0.5 16) ) . (slow $ slow 4 "2 [3 2]")))
      $ rarely (every 4 (striate 4))
      $ sometimes (every 4 (const
        $ randcat [
          sound "[c64sn:3 sn:2] [ . c64hh*3] c64bd:7 c64cp",
          sound "c64sn*6" # gain ((run 8 )/17 + 0.6),
          sound "[[. c64hh] c64bd:7 [c64bd[c64bd[c64bd]]]] {{[c64cb*3]/2}%2,[. . . c64hh:0*4]} ",
          sound "[[. c64hh] c64bd:7 [c64bd[c64bd[c64bd]]]] [. c64sn],[. . . c64hh:0*4]} "
        ]))
    $ slow 3
    $ stack [
      sound "{<<{c64bd}%3 c64bd [c64bd [. . c64bd*2]]>, [ . c64hh]> [c64sn [c64hh c64cp*3]]}%3",
      smash 4 [1 , 3, 1,  4] $ stut 2 0.5 3 $ (0.125 ~>) $  sound "{[c64hh:4*2]*[[3 4] [2 1]]}%3" |+| n ( scale 1 0 $ irand 6) # gain 0.9
    ]
  ]


let melody = "0 3 5 1" + "[0 2 1 3]/3" - "[3 4 [-2 5] 0]/8" - "[12 5] 12"

let melodyTransform notes = (foldEvery [2, 7, 9, 11] (slow "3 1 2")
  $ slow 3
  -- $ stut 1 0.5 16
  $ up (scaleP "dorian"
    $ notes + 24
  ) )


d6
  $ smash 4 [3 ,2 ,1 ,2]
  $ foldEvery [2, 7, 9, 11] (slow "3 1 2")
  $ slow  3
  $ up (scaleP "dorian"
    $ melody + 7
  )
  # s "ATC-1:14" |*| speed 4 # legato 1

d7
  -- $ smash (run 8) [1, 2, 1, 2]
  $ foldEvery [2, 7, 9, 11] (slow "3 1 2")
  $ slow 3
  $ up (scaleP "dorian"
    $ melody + 3
  )
  # s "tx81z-tine" |*| speed 4 # legato 1

d5
  $ foldEvery [8,13] ((|*|speed 2))
  $ foldEvery [3,8] (slow 3.rev)
  $ whenmod 8 7 (superimpose (slow 3 . palindrome. stut' 3 0.88 (palindrome)) )
  $ superimpose ((0.125 ~>).rev.slow 3)
  $ foldEvery [2, 7, 9, 11] (slow "3 1 2")
  -- $ stut 1 0.5 16
  $ up (scaleP "dorian" $ "0 3 5 1" + "[0 2 1 5]/3" - "[3 4 [-2 5] 0]/8")
  #s "pe-gtr" #n 10 -- |*| speed 4
  -- #s "tx81z-tine" |*| speed 4

d8
  $ foldEvery [2, 7, 9, 11] (slow "3 1 2")
  $ up ((scaleP "dorian" $ "[[<0,7,15> <0,-3,5>]/2 [<8,3,10> ~]/2]" + "[0 2 1 5]/3" - "[3 4 [-2 5] 0]/8") - 7)
  #s "rhodes" # n 12 |*| speed (-2)

d5
  $ foldEvery [2, 7, 9, 11] (slow "3 1 2")
  $ superimpose ((0.125 ~>).rev.slow 3)
  -- $ stut 1 0.5 16
  $ up (scaleP "dorian" $ "0 3 5 1" + "[0 2 1 5]/3" - "[3 4 5 0]/8")
  #s "AKWFchain" |*| speed 8 # begin 0 #end 0.125
  -- #s "tx81z-tine" |*| speed 4

d5 $ silence




d4 $ whenmod 8 7 (palindrome. stut' 3 0.88 (palindrome) ) $ degradeBy 0.77 $ sound "speakspell*8" # n ( run 8)

hush




-- =================================================================================================== --

d3
  $ (0.25 ~>)
  -- $ (mask ("~ [1 1] ~ [1 ~ 1]" :: Pattern Bool) (
  $ (# legato "[0 0.5] 0.25 [0 0.5] [ 1 0.33 0.5]")
  -- $ (|+| n "0 1 [-2 7 9 2]/4")
  $ juxBy "0.5 0 -0.25 0.125" ((|+| speed ((rand)/128)) .  (|+| sustain 4) . chop 4 . degradeBy 0.8 . (# crush (scalex 16 3 $ rand)) . striate 3 )
  $ superimpose ((0.125 ~>).rev.slow 3)
  $ foldEvery [2, 7, 9, 11] (slow "3 1 2")
    $ slow 3
    -- $ stut 1 0.5 16
    $ up (scaleP "dorian"
      $ melody + 24
    )
  # s "tx81z-tine"  # lpf 4000 # room 0.2)
  -- )
  -- # s "acousticBass:3" |*| speed 8 # lpf 4000 # room 0.2
  -- # s "ATC-1:12" |*| speed 8 # lpf 4000 # room 0.2

d2 $ sound "{psr*8,bd*2}" # n ( run 8)

d1
  $ every 2 (0.125 ~>)
  $ foldEvery [4, 11, 7] (within (0.5,0.75)
  $ (0.25 ~>).palindrome)
  $ striate 16 $ sound "breaks125"


d2 $ sound "pad" # n (slow 4 $ run 8)

d2 $ sound "moog-chain" # n (slow 4 $ run 3)

d1
  $ sometimes $ ((#n ((run 8) + (irand 8))))
  $ sometimes $ foldEvery [3,7,8] (slow $ slow 4 "2 [3 2]")
  $ every 4 (const $ sound "[c64sn:3 sn:2] [c64hh*3] c64bd:7 c64cp")
  $ slow 3
  $ sound "{<{c64bd}%3, [ . c64hh]> [c64sn [c64hh c64cp*3]]}%3"


d1
  $ sometimes (#n (run 8))
  $ sometimesBy 0.5 ( foldEvery [3,7,8] (rarely ( palindrome . stut 3 0.5 16) . $ slow $ slow 4 "2 [3 2]"))
  $ rarely (every 4 (striate 4))
  $ every 4 (const
    $ randcat [
      sound "[c64sn:3 sn:2] [c64hh*3] c64bd:7 c64cp",
      sound "c64sn*6" # gain ((run 8 )/17 + 0.6),
      sound "[c64hh c64bd:7 [c64bd[c64bd[c64bd]]]] {{[c64cb*3]/2}%2,[. c64hh:0*4]} "
    ])
  $ slow 3
  $ stack [
    sound "{<{c64bd}%3, [ . c64hh]> [c64sn [c64hh c64cp*3]]}%3",
    stut 2 0.5 3 $  sound "{[c64hh:4*2]*[[3 4] [2 1]]}%3" |+| n ( scale 1 0 $ irand 6) # gain 0.9
  ]

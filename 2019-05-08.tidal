-- d1
-- -- $ whenmod 7 5 (rev.striate "1 <3 8> . 8 12 3 2")
-- $ every 2 (inside 2 (every 2 (rev.chop 4)))
-- $ splice 64 ( "[4@2 3 2 1 0] 1 [2] [4 6] 2 [19 2 3] 1 2*3" + (16*(run "4 5 1")))
-- $ s "md-break" # unit "c" #cut 1 #gain 1.2 #shape 0.3
--
-- d2 $ slow 4 $ every 3 (rev.striate "3 2 1") $ slow 2 $ iter 4 $ slice 16 ( run 8) $ s "glass-box" #cut 2 # delay 1 # delayfeedback 0.5 # delaytime 0.75 #orbit 1
--
-- d3 $ slow 2 $ slow 3 $ zoom (0,0.25) $ chop 16 $ s "glass-box" #speed 0.5 #cut 2
--
--
-- d1 $ splice 4 (run 16) $ striate "8 16 2 1 12 3" $ n (iter 4 $ every 3 (inside 2 rev) $ run 16) # s "xvd" #gain 1 #speed 1.25
--
--
-- d1 $ inside 16 (foldmod [1,2,7] 7 5 (+ n  2)) $ sometimes (stut "<2>" 0.55 (choose [(1/4),(1/8),(1/16),(1/6)])) $ s "gabba"
--
--
-- d1 $ splice 4 (run 16) $ striate "8 16 2 1 12 3" $ n ( iter 4 $ every 3 (inside 2 rev) $ run 16) #s "xvd" #gain 1.2 #speed 1.25
--
-- d1 $ splice 4 (run 16) $ striate "8 16 2 1 12 3" $ n (every 4 (inside 16 (foldmod [1,2,5] 11 5 (*  2)) ) $ iter 4 $ every 3 (inside 2 rev) $ run 16) # s "xvd" #gain 1.2 #speed 1.25
--
--
-- -- let counter low high direction = run
-- d1  $ (inside 8 (foldmod [1,2,3,4] 7 4 (+ n "1 2"))) $ e (slow 3 $ run 8) (slow 4 $ 4 + run 8) 0 $ s "xvd" #gain 1 #speed 1.25
--
-- d2 $ slow 2  $ note( scale "minor" $ (inside 4 (foldmod [1,2,3,4] 7 4 (+ "1 0@2  4"))) "0" ) # s "midi" #gain 1.25 #speed 1.25

hush

counter low high numcycles =
                    slow numcycles
                    $ if (countingUp) then (run range) else (range - (run range))
                    where countingUp = (low < high)
                          range = abs (high - low)

triangleCount range numcycles = slow numcycles $ palindrome $ run range

hush

parade depth offset fx p = splitQueries $ p {query = q}
          where q st = query (head $ rotateList (currentCycleCount + offset) $ take depth $ iterate fx p) st
                          where currentCycleCount = (floor $ start $ arc st)
                rotateList _ [] = []
                rotateList n xs = zipWith const (drop n (cycle xs)) xs




:t parade

:t rotate

hush

-- do
-- {
-- -- cps (128/60/2)
-- d9 $ fast 2 $ midicmd "midiClock*48" # s "midi";
-- d8 $ midicmd "start" # s "midi";
d1
-- $ fix (|- speed rand) (s "xvd" # n 4)
$ splice 4 ( run 16)
$ every 8 (slow 3)
$ every 4 (rev)
$ foldmod [(1/2),1,2] 11 4 (inside 2 ((1/2) <~))
$ inside 4 (foldmod [(1/2),1,2] 11 4 (outside 2 (iter 4)))
$ foldEvery [4,3] (inside 2 (rot 6))
-- $ parade 8 8 ( "<2 1.5>" <~)
$ every 2 (striate "8 16 2 1 12 3")
$ every 3 (inside 4 (every 2 (sometimes ghost)))
$ stack [
  n ( iter 4 $ every 3 (inside 2 rev) $ run 16) #s "xvd" #gain 1.4 #speed 1.25
  ,
  note (scale "minor" $ "~ <0 5 -1 0>" ) #s "midi" #gain 1.25
  ]

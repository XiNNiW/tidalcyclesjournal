hush

setcps (121/60/4)

--open
d1 $ s "mlt_bd*4"

d2 $ ghost $  s "mlt_ht(2,16,<0,2,3,4>)"

d2 $ silence

--advance
d1 $ s "mlt_bd*8" #n (run 8)

--terrace 1
d2
$ inside 2 (every 2 (sometimes (stut 3 0.5 0.25) ))
$ sometimes ghost
$ s "pnx_ch(3,8)"
# n (range 0 8 (rand))
# delay 0.5
# delaytime 0.5
# lock 1
# orbit 1

--terrace 2
d1
$ whenmod 4 3 (every 2 $ ghost .(euclid "<2 3 6>" 16) . slow 4)
$ stack [
  s "mlt_bd*8" #n (run 8)
  ,
  rarely ghost $
  s "mlt_rs:4(2,16,5)" # orbit 2
  ]

--terrace 3
d3
$ s "mlt_bz"
# n (iter 8 $ (run 8))
# orbit 3

-- breakdown

d1 $ s "mlt_bd" # delay rand # delayfeedback 0.8 #delaytime 0.333

--reprise and terrace 3
do {
  d1
  $ whenmod 4 3 (every 2 $ ghost .(euclid "<2 3 6>" 16) . slow 3)
  $ every 4 (rev)
  $ stack [
    s "mlt_bd*8" #n (run 8)
    ,
    rarely ghost $
    s "mlt_rs:4(2,16,5)" # orbit 2
    ,
    every 4 (slow 8) $ n (run 16) #s "mlt_ht" # legato 0.1
    ];
  d4
  $ sometimes (rev.chop 16)
  $ (rev. stut 3 (1/8) 0.8)
  $ s "mlt_cd*2" # n (iter 8 $ (run 8)) # orbit 4 #room 0.15 # delay 0.66 # delayfb 0.6 # delaytime (1/12) # lock 1 # speed (-1) #bpf 2000
}

do{
  d2 $ silence;
  d4 $ silence;
  d1 $ s "mlt_bd" # delay rand # delayfeedback 0.8 #delaytime 0.333
}

do {
  hush;
  d1 $ n (run 8) # s "pnx_bd";
}

d1 $ stack [
n (run 16) # s "pnx_bd"
,
n (run 16) # s "[[~ [pnx_sd ~ ]] [pnx_sd ~]]"
]

d1
-- $ whenmod 8 5 (iter 8 .iter 4)
$ stack [
n (run 16) # s "pnx_bd" # orbit 0 #gain 0.9
,
n (run 16) # s "[[~ [pnx_sd ~ ]] [pnx_sd ~]]" #orbit 1 #gain 0.6
,
ghost $ s "[~ pnx_cc:5]*2" #orbit 2 #gain 0.7
,
n (run 16) # s "pnx_acid" # orbit 3 #gain 0.7
]

d3 $ s "pnx_m1"

do{
d1
$ iter 8
$ every 8 (rev.chop 4)
$ every 32 (sometimes $ backrush 8)
$ every 8 (someCycles $ slow 3)
$ whenmod 11 7 (rev.iter 4)
$ whenmod 8 5 (iter 8 . iter 4)
$ stack [
n (run 16) # s "pnx_bd" # orbit 0 #gain 0.9 #lpf (1000*perlin)
,
n (run 16) # s "[[~ [pnx_sd ~ ]] [pnx_sd ~]]" #orbit 1 #gain 0.7 #lpf (1000*perlin)
,
ghost $ s "[~ pnx_cc:5]*2" #orbit 2 #gain 0.7
,
n (run 16) # s "pnx_acid" # orbit 3 #gain 0.7 #delay  0.5 #delayfb 0.2
];
d2 $ s "pnx_str" #n (slow 8 $ run 8)#gain 0.8 #lpf (1000*perlin);
}

d3
$ every 8 (chop 8.slow 8)
$ stut 3 (1/6) 0 $ slow 4 $ n (run 32) # s "pnx_m2" # speed ("[2 -1]*8") # gain 0.8 #hpf 400  #lpf (1000*perlin)

d4 $ s "pnx_cc:1*4" #hpf (range 5000 8000 $ slow 8 $ perlin) #gain 0.8

do
  jumpMod 1 8 $ silence;
  jumpMod 2 4 $ silence;

--NEXT

do
  interpolateIn 3 16 $ silence # room 1 #size 1;
  d1 $ s "o_bd" # gain 0.8

let
    morph choices = chooseBy perlin choices
in
d1
$ (# n (fast 8 $ morph [0,4,1,0,21]))
-- $ ghost
$  stack [
  s "o_bd(<2 3 4 [1 [6 12]]>,16,<0 2>)"  # gain 0.8
  ,
  ghost $ s "o_sd(<1 2 [1 3]>,16,<8 9 [12 9 9 4]>)" #gain 0.8
  -- ,
  -- s "o_ch(7,16, <0 2 3 1 4 5>)" # n (run 8) # gain 0.8 # delay (morph [0, 1, 0.5]) #delaytime (1/12) #delayfeedback 0.7 #lock 1 # orbit 4
  ]


let
    morph choices = chooseBy perlin choices
in
d1
$ (# n (fast 8 $ morph [0,4,1,0,21]))
-- $ ghost
$  stack [
  s "o_bd(<2 3 4 [1 [6 12]]>,16,<0 2>)"  # gain 0.8
  ,
  ghost $ s "o_sd(<1 2 [1 3]>,16,<8 9 [12 9 9 4]>)" #gain 0.8
  ,
  s "o_ch(7,16, <0 2 3 1 4 5>)" # n (run 8) # gain 0.8 # delay (morph [0, 1, 0.5]) #delaytime (1/12) #delayfeedback 0.7 #lock 1 # orbit 4
  ]

let
    morph choices = chooseBy perlin choices
in
d1
$ every 8 (someCycles $ const $ s "o_bz:21")
$ iter 8
$ (# n (fast 8 $ morph [0,4,1,0,21]))
-- $ ghost
$  stack [
  s "o_bd(<2 3 4 [1 [6 12]]>,16,<0 2>)"  # gain 0.8
  ,
  ghost $ s "o_sd(<1 2 [1 3]>,16,<8 9 [12 9 9 4]>)" #gain 0.8
  ,
  jux (iter 8) $ s "o_ch(7,16, <0 2 3 1 4 5>)" # n (run 8) # gain 0.9 # delay (morph [0, 1, 0.5]) #delaytime (1/12) #delayfeedback 0.7 #lock 1 # orbit 4
  ,
  whenmod 13 11 (#speed (-1)) $ s "o_bz" #gain 0.9
  ]

let
    morph choices = chooseBy perlin choices
in
d1
-- $ every 8 (someCycles $ const $ s "o_bz:21")
$ every 4 (rev.fast 2)
$ (|+ n (fast 8 $ morph [0,5,21,8]))
-- $ ghost
$  stack [
  sometimes (stut 3 (1/16) 0.1) $ "o_bd(<9 12 11 [9 [6 12]]>,16,<0 8>)" # gain 0.8 #n (fast 2 $ run 16)
  ,
  ghost $ s "o_sd(<4 2 [6 3]>,16,<8 9 [12 9 9 4]>)" #gain 0.8 #n (run 16)
  ,
  ghost $ s "o_cp(<4 2 [6 3] 1>,16,9)" #gain 0.8 #n (run 16)
  ,
  s "o_ch(4,16, <0 2 3 1 4 5>)" # n (run 8) # gain 0.8 # delay (morph [0, 1, 0.5]) #delaytime (1/12) #delayfeedback 0.7 #lock 1 # orbit 4
  ,
  every 4 (fast 4) $ s "o_plk" #orbit 3
  ,
  whenmod 13 11 (#speed (-1)) $ s "o_bz" #gain 0.9 #n "<<0 1 2 3>>" #orbit 1
  ]

let
    morph choices = chooseBy perlin choices
in
d1
$ fast 2
$ every 8 (someCycles $ const $ backrush 16 $ s "o_bd")
$ (|+ n (fast 8 $ morph [0,5,21,8]))
$  stack [
  sometimes (stut 3 (1/16) 0.1) $ "o_bd(<9 12 11 [9 [6 12]]>,8,<0 8>)" # gain 0.8 #n (fast 2 $ run 16)
  ,
  ghost $ fast 2 $ s "o_sd(<4 2 [7 3]>,16,<8 9 [12 9 9 4]>)" #gain 0.8 #n (run 16)
  ,
  ghost $ s "o_cp(<4 2 [6 3] 1>,16,9)" #gain 0.8 #n (run 16)
  ,
  s "o_ch(4,16, <0 2 3 1 4 5>)" # n (run 8) # gain 0.8 # delay (morph [0, 1, 0.5]) #delaytime (1/12) #delayfeedback 0.7 #lock 1 # orbit 4
  ,
  every 4 (fast 4) $ s "o_plk" #orbit 3
  ,
  whenmod 13 11 (#speed (-1)) $ s "o_bz" #gain 0.9 #n "<<0 1 2 3>>" #orbit 1 #note "<<0 5 7 10>>"
  ,
  jux ((# leslie 0.75).(|+ note 12)) $ slow 4 $ s "o_orc*2" #n (run 8) #gain 0.8 #orbit 5 #speed (-0.5) #leslie 1
  ]

d4 $ s "pnx_cc:1*8" #hpf (range 5000 8000 $ slow 8 $ perlin) #gain 0.8


do{
  let
      morph choices = chooseBy perlin choices
  in
  clutchIn 1 8
  $ (|+ n (fast 8 $ morph [0,5,21,8]))
  $  stack [
    s "o_ch(4,16, <0 2 3 1 4 5>)" # n (run 8) # gain 0.8 # delay (morph [0, 1, 0.5]) #delaytime (1/12) #delayfeedback 0.7 #lock 1 # orbit 4
    ,
    every 4 (fast 4) $ s "o_plk" #orbit 3
    ,
    jux ((# leslie 0.75).(|+ note 12)) $ slow 4 $ s "o_orc*2" #n (run 8) #gain 0.8 #orbit 5 #speed (-0.5) #leslie 1
    ];
  d4 $ silence
}

--Lets do that again but different

let
    morph choices = chooseBy perlin choices
in
xfadeIn 1 8
-- d1
$ (|+ n (morph [0,8,9,16]))
$ (|+ n (morph [1,2,3,4,5,7]))
$ stack [
s "v_bd(<3 4 2 5 2>,16)" #gain 0.8 #legato 2 #orbit 2
,
ghost $ s "v_sd:4(2,16,9)" #gain 0.8 #orbit 1
,
ghost $ s "v_key(11,16)" #gain 0.7 #legato 0.25 #orbit 3
]

let
    morph choices = chooseBy perlin choices
in
-- xfadeIn 1 8
d1
$ every 4 (inside 2 (rev.every 2 (fast 2)))
$ whenmod 14 6 (iter 4.rev)
$ whenmod 17 5 (iter 8)
$ (|+ n (morph [0,8,9,16]))
$ (|+ n (morph [1,2,3,4,5,7]))
$ stack [
s "v_bd(<3 4 5 8>,16)" #gain 0.8 #legato 2 #orbit 2
,
ghost $ s "pnx_bd*4" #gain 0.9
,
ghost $ s "v_sd:4(2,16,9)" #gain 0.8 #orbit 1
,
ghost $ s "v_key(11,16)" #gain 0.7 #legato 0.25 #orbit 3
,
s "v_arp" #orbit 4
]

let
    morph choices = chooseBy perlin choices
in
-- xfadeIn 1 8
d1
-- $ iter 16
$ every 3 (slow "<2 3>")
$ foldEvery [3,4] (inside 2 (rev.every 2 (fast 2)))
$ whenmod 14 6 (iter 4.rev)
$ whenmod 17 5 (iter 8)
$ (|+ n (morph [0,8,13,16]))
$ (|+ n (morph [1,2,3,4,5,7]))
$ stack [
s "v_bd(<3 4 5 8>,16)" #gain 0.8 #legato 2 #orbit 2
,
ghost $ s "pnx_bd*4" #gain 0.9
,
ghost $ s "v_sd:4(2,16,9)" #gain 0.8 #orbit 1
,
ghost $ s "v_key(11,16)" #gain 0.7 #legato 0.25 #orbit 3
,
s "v_arp" #orbit 4
,
s "mlt_ht*8" #gain 0.9 # orbit 1 #speed (perlin)
,
s "~ x_dub(3,8)" # note 8 #gain 0.9 #orbit 4 #room 0.5 #size 0.9 #lpf (900*tri+1000)
]

let
    morph choices = chooseBy perlin choices
in
-- xfadeIn 1 8
d1
$ iter 4
$ every 3 (slow "<2 3>")
$ foldEvery [3,4] (inside 2 (rev.every 2 (fast 2)))
$ whenmod 14 6 (iter 4.rev)
$ whenmod 17 5 (iter 8)
$ stack [
ghost $ s "pnx_bd*4" #gain 0.9
,
(|+ n (morph [0,8,9,16])) $
(|+ n (morph [1,2,3,4,5,7])) $
stack [
s "v_bd(<3 4 5 8>,16)" #gain 0.8 #legato 2 #orbit 2 #note (choose [0, 12]) #speed (choose [(1),(-1)])
,
ghost $ s "pnx_bd*4" #gain 0.9
,
ghost $ s "v_sd:4(2,16,9)" #gain 0.8 #orbit 1
,
ghost $ s "v_key(11,16)" #gain 0.7 #legato 0.25 #orbit 3
,
s "v_arp" #orbit 4
,
s "mlt_ht*8" #gain 0.9 # orbit 1 #speed (perlin)
,
s "~ x_dub(3,8)" # note 8 #gain 0.0 #orbit 4 #room 0.7 #size 0.6 #bpf 500
,
n (slow 8 $ run 8) #s "v_ld*4" #note ("0 -5 -7") #speed (-2) #bpf 1000 #hpf 2000 #delay 1 #delayfeedback 0.8 #delaytime 0.333 #orbit 5
] #lpf (1000*tri+2000*perlin)
]


let
    morph choices = chooseBy perlin choices
in
-- xfadeIn 1 8
d1
$ whenmod 14 6 (iter 4.rev)
$ whenmod 17 5 (iter 8)
$ stack [
ghost $ s "pnx_bd*4" #gain 0.9
,
(|+ n (morph [0,8,9,16])) $
(|+ n (morph [1,2,3,4,5,7])) $
stack [
s "v_bd(<3 4 5 8>,16)" #gain 0.8 #legato 2 #orbit 2 #note (choose [0, 12]) #speed (choose [(1),(-1)])
,
ghost $ s "v_sd:4(2,16,9)" #gain 0.8 #orbit 1
,
s "mlt_ht*8" #gain 0.9 # orbit 1 #speed (perlin)
-- ,
-- s "~ x_dub(3,8)" # note 8 #gain 0.9 #orbit 4
]]

xfadeIn 1 16 $ s "mlt_ht*8" #gain 0.9 # orbit 1 #speed (perlin)

d1 $ n (run 16) #s "EFM" #gain 0.9

d2 $ s "x_sub" #orbit 1

d3 $ chop 8 $ s "v_str" # orbit 3

do
d1 $ silence --n (run 16) #s "EFM" #gain 0.9;
d2 $ s "x_sub" #orbit 1;
d3 $ chop 8 $ s "v_str" # orbit 3;


do
d1 $ outside 2 ( every 8 (someCycles $ const silence) )$ every 4 ( sometimes ghost . whenmod 17 11 (iter 8) . whenmod 7 4 (rev. iter 4) )$ n (run 16) #s "EFM" #gain 0.9;
d2 $ every 4 (someCycles $ stut 4 (1/8) 0) $ note "<0 [0 7*3] 0 [0 [~ 0 7 -2]]>" #s "x_sub" #orbit 1;
d3 $ chop (chooseBy perlin [8, 16, 4, 12]) $ s "v_str" # orbit 3 # n (chooseBy perlin [0, 0, 1, 2, 4, 8, 9]) #room 0.2 #size 0.8 #delay 0.8 #delaytime 0.3333 #delayfeedback 0.6;
d4 $ slow 4 $ s "v_pad" #n (chooseBy perlin [0,4,5,6]) #note (chooseBy perlin [0,(-12)]);

d1
$ foldEvery [3,4] (iter 16)
$ every 4 (rev.slow 3)
$ outside 2 ( every 8 (someCycles $ const silence) )$ every 4 ( sometimes ghost . whenmod 17 11 (iter 8) . whenmod 7 4 (rev. iter 4) )$ n (run 16) #s "EFM" #gain 0.9

d4 $ slow 4 $ s "v_pad" #n (chooseBy perlin [0,4,5,6,10]) #note (chooseBy perlin [0,(-12)])

d3 $ chop (chooseBy perlin [8, 16, 4, 12]) $ s "v_str" # orbit 3 # n (chooseBy perlin [0, 3, 10,3, 4, 3, 8, 15, 9]) #room 0.2 #size 0.8 #delay 0.8 #delaytime 0.3333 #delayfeedback 0.6

d2
$ every 4 (sometimes $ fast 3)
$ every 4 (someCycles $ stut 4 (1/8) 0) $ note "<0 [0 7*3] 0 [0 [~ 0 7 -2]]>" #s "x_sub" #orbit 1

d1
$ (iter 4. iter 8)
$ inside 2 (iter 4)
-- $ (slow 4 . fast (fmap ([0,3,5]!!) $ markovPat 8 1 [[3,5,2], [4,4,2], [0,1,0]]))
$ foldEvery [3,4] (iter 16)
$ every 4 (rev.slow 3)
$ outside 2 ( every 8 (someCycles $ const silence) )
$ every 4 ( sometimes ghost . whenmod 17 11 (iter 8) . whenmod 7 4 (rev. iter 4) )
-- $ outside 2 ( chunk 4 (ghost.euclid 3 4))
$ n (run 16) #s "EFM" #gain 0.9

d1
$ outside 4 (iter 8)
$ (spreadr ($) [iter 8, (ghost .slow 3),(rev. iter 4), (backrush 16)])
$ every 8 (spreadr ($) [const "{EFM:0(3,8), EFM:5(4,16,4)}", const "{EFM(3,16), EFM:5(1,8,5), EFM:1*4}", const "EFM*16"])
$ chunk 4 (slow 3.ghost)
$ n (run 16) #s "EFM" #gain 0.9

d1 $ s $ slow 2 $ substruct "x [x x]" "bd hh sn bd"

hush

d1 $ (fast (fmap ([0,3,5]!!) $ markovPat 8 1 [[3,5,2], [4,4,2], [0,1,0]])
) $ s "drum*4" # n (fmap ([0,3,5]!!) $ markovPat 8 1 [[3,5,2], [4,4,2], [0,1,0]])

d1 $ s (fmap (["bd", "cp", "arpy"]!!) $ markovPat 8 1 [[3,5,2], [4,4,2], [0,1,0]])

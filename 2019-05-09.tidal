counter low high numcycles =
                    slow numcycles
                    $ if (countingUp) then (run range) else (range - (run range))
                    where countingUp = (low < high)
                          range = abs (high - low)

triangleCount range numcycles = slow numcycles $ palindrome $ run range

hush


-- do
-- {
-- -- cps (128/60/2)
-- d9 $ midicmd "midiClock*48" # s "midi";
-- d8 $ midicmd "start" # s "midi";
d1
$ every 4 (within (0.75, 1) $ spread ($) [backrush 64, striate "8 16 2 1 12 3"])
$ fix (ghost) (n "[0,1,7]")
$ fix (often one) (n "0")
$ off 3.75 ( inside 8 (foldmod [5,1,2,11,3] 5 4 (+ n "<1 3>")))
$ s "p6(<3 2 3 4>,8,<0 3 1>)" # gain 1.2 #speed (1.8- rand)--;
-- }

do
d9 $ midicmd "stop" # s "midi"
hush

do
cps (128/60/2)
d9 $ midicmd "midiClock*48" # s "midi"

d9 $ midicmd "stop" # s "midi"

d9 $ midicmd "start" # s "midi"

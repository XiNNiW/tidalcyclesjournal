

d1 $ s "mod-bd"

d2 $ note "[0 3 5 7]*2" #octave 3 # s "midi" # midichan 0

d2 $ note "[0 3 5 7]*2" # octave 3 # s "fm02" -- # midichan 0

hush

-- riley :: [Int] -> [Pattern a] -> Pattern a
-- riley [] _ = silence
-- riley _ [] = silence
-- riley (r:rs) (p:ps)  = cat $ ( inside (toTime r)  (cat . replicate r) p) : (riley (rs++[r]) ps ) : []
--
-- inC :: [[Int]] -> [Pattern a] ->  Pattern a
-- inC [] _ = silence
-- inC _ [] = silence
-- inC (rs:rss) ps = stack $ (riley rs ps  ) : (inC rss ps ) : []
--
-- d2 $ note (inC  [[3,5,3,4],[5,3],[12,4,5]] ["[0 3 5 7]*2", "~ 0*3 0 3", "7 7 7"]  ) # octave 5 # s "fm02"

:t inside

let playerChoices = [ (irand 8) , (rotL 123134 $ irand 8), (rotL 53245 $ irand 8), (rotL 124245 $ irand 8)]
    patterns = ["0 0 ~ [5 0]", "7 12 9(3,8)", "11 [~ 4]","7(5,8)", "[19 12 21]*4"]
in
d2 $ slow 4 $  note ( rileyWith playerChoices patterns ) # octave 5 # s "fm02"


wiggle pat modulation = pat + modulation * (rotRWith modulation) pat + modulation * (slow modulation) pat

lfom amp speed gate pat = fast speed $ amp*pat

rotRWith :: Pattern Time -> Pattern a -> Pattern a
rotRWith pat = tParam rotR pat

repeatCyclesWith :: Pattern Int -> Pattern a -> Pattern a
repeatCyclesWith pat = tParam repeatCycles pat

rileyWith :: [Pattern Int ]-> [Pattern a] -> Pattern a
rileyWith _ [] = silence
rileyWith [] _ = silence
rileyWith (wave:waves) pats = stack $ (repeatCyclesWith wave $ cat pats) : rileyWith waves pats : []
                      where repeatCyclesWith pat = tParam repeatCycles pat

let wave = wiggle rand tri
    -- wave2 = wiggle wave tri
    -- wave3 = wiggle wave2 tri
    patterns = ["0 0 ~ [5 0]", "7 12 9(3,8)", "11 [~ 4]","7(5,8)", "[19 12 21]*4"]
in
d1 $ stack [
  n (repeatCyclesWith (fmap round $ slow 4 rand) $ cat patterns) #s "bd",
  (0.5 ~>) $ n (repeatCyclesWith (fmap round rand) $ cat patterns) #s "sd",
  (0.385 ~>) $ n (repeatCyclesWith (fmap round $ slow 8 rand) $ cat $ patterns) #s "808oh"
]

hush



:t irand


irandr a b = irand (b - a) + a

shifty a p = ((a*getStarts p) ~>) p

getEnds :: Pattern a -> Pattern Time
getEnds = withEvent (\(Event w p v) -> Event w p (stop p))

getStarts :: Pattern a -> Pattern Time
getStarts = withEvent (\(Event w p v) -> Event w p (start p))

withValue :: (a -> a) -> Pattern a -> Pattern a
withValue f = withEvent (\(Event w p v) -> Event w p (f v))

:t Event

:t (#s "")

:t rileyWith

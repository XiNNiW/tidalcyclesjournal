setcps (177/60/2)

hush

d1 $ foldEvery [2,3] (slow $ randcat [2,3,4]) $ rip' 0 1 "16" 0.2 0.1 $ sound "EP12:1*4"

let rip a b p = within (0.25, 0.75) (slow 2 . rev . stut 8 a b) p
    rip' a b c d e p = within (a, b) (slow 2 . rev . stut c d e) p
    brakk samps = ((# unit "c") . (# speed "8")) $
        sound (samples samps (irand 30))
    rep n p = stut' (n-1) (0.125*3) (|*| gain "1") $ p
    shift' x p = (x <~) p
    progression = (slow 4 $ "<0 0 -2 -3 4 5 >")

d1
  $ whenmod 14 17 (slow 2 . iter 8)
  $ foldEvery [3,9] (shift' "<0.25 0 0.75 0>")
  -- $ whenmod 13 11 (|=| accelerate "1")
  $ every 9 (often (rev))
  -- $ every 16 (striate (2*(irand 8)) )
  $ every 4 (sometimes (slow 2) . chop 4)
  $ every 7 (often (rip 0.5 0.1))
  $ every 6 (often (rip' 0 1 8 0.25 0.1))
  $ every 8 (sometimes (rip' 0 1 "<8 4 3 2>" 0.25 0.1))
  $ foldEvery [3,5] (sometimes (# coarse (shift' 3 $ choose [4,6..18])))
  $ every 4 (# accelerate "0.5 -0.5")
  $ every 8 (const
    $ stack [
      n (randcat ["{5 5 5}%3", "5*8", "0*4"]) #s "EP12",
      n "[0 1] ~ " # s "EP12" ,
      note ((scaleP "hexMajor7" $ "~ 0" + progression)) # s "pizz" ,
      s "~ EFM:3"
    ]
  )
  $ stack [
    s "EFM:0([3 5 2 1]/4,8)",
    s ( cat ["~ EFM:4","~ [EFM:5 EP12:5]","~ [EFM:4 EFM:5]", "~ [~ EP12:5]"]) ,
    s ( cat ["~ [~ ~ EFM:7 ~]","[~ EFM:9*4, ~ [~ ~ EFM:7 ~]]"]) # speed rand ,
    s "EFM:2*8" # gain "0.88 0.9 0.8 0.88 1 0.8 0.9 0.8",
    s "~ EFM:3",
    slow 2 $ note ((scaleP "hexMajor7" $ "[0 <3? -3>] ~" + progression)) # s "pizz",
    slow 4 $ note ((scaleP "hexMajor7"
      (cat[(" 5 . <0 -3> <3 0> 8 5 . -2 0 <4 5 6> . 7" + progression),"<0 1 -2 9>" + progression])
    )) #s "pizz:2" -- # delay 0.5 # delayfeedback 0.4 # delaytime 0.33
  ] -- # cps (177/60/2)
